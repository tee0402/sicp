#lang sicp

(define (=number? exp num) (and (number? exp) (= exp num)))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
;(define (make-sum a1 a2)
;  (cond ((=number? a1 0) a2)
;        ((=number? a2 0) a1)
;        ((and (number? a1) (number? a2)) (+ a1 a2))
;        (else (list '+ a1 a2))))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))
;(define (make-product m1 m2)
;  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
;        ((=number? m1 1) m2)
;        ((=number? m2 1) m1)
;        ((and (number? m1) (number? m2)) (* m1 m2))
;        (else (list '* m1 m2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list m1 '* m2))))
(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        (else (list '** b e))))
;(define (sum? x) (and (pair? x) (eq? (car x) '+)))
;(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))
(define (sum? x) (and (pair? x) (or (eq? (cadr x) '+) (and (not (null? (cdddr x))) (eq? (cadddr x) '+)))))
;(define (addend s) (cadr s))
;(define (addend s) (car s))
(define (addend s)
  (if (or (null? (cdddr s)) (eq? (cadddr s) '*))
      (car s)
      (list (car s) (cadr s) (caddr s))))
;(define (augend s)
;  (if (= (length s) 3)
;      (caddr s)
;      (append '(+) (cddr s))))
;(define (augend s) (caddr s))
(define (augend s)
  (if (null? (cdddr s))
      (caddr s)
      (if (eq? (cadddr s) '+)
          (if (null? (cdr (cddddr s)))
              (car (cddddr s))
              (cddddr s))
          (cddr s))))
;(define (product? x) (and (pair? x) (eq? (car x) '*)))
;(define (product? x) (and (pair? x) (eq? (cadr x) '*)))
(define (product? x) (and (pair? x) (eq? (cadr x) '*) (or (null? (cdddr x)) (eq? (cadddr x) '*))))
;(define (multiplier p) (cadr p))
;(define (multiplier p) (car p))
(define (multiplier p)
  (if (null? (cdddr p))
      (car p)
      (list (car p) (cadr p) (caddr p))))
;(define (multiplicand p)
;  (if (= (length p) 3)
;      (caddr p)
;      (append '(*) (cddr p))))
;(define (multiplicand p) (caddr p))
(define (multiplicand p)
  (if (null? (cdddr p))
      (caddr p)
      ;(if (null? (cdr (cddddr p)))
          (car (cddddr p))))
          ;(cddddr p))))
(define (exponentiation? x) (and (pair? x) (eq? (car x) '**)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var)
                              (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (make-product (exponent exp)
                        (make-exponentiation (base exp) (- (exponent exp) 1)))
          (deriv (base exp) var)))
        (else
         (error "unknown expression type: DERIV" exp))))

(deriv '(x + 3 * (x + y + 2)) 'x)