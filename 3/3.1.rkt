#lang sicp

(define (make-accumulator sum)
  (lambda (n)
    (set! sum (+ sum n))
    sum))

(define (make-monitored f)
  (let ((calls 0))
    (lambda (m)
      (cond ((eq? m 'how-many-calls?) calls)
            ((eq? m 'reset-count) (set! calls 0))
            (else (set! calls (+ calls 1)) (f m))))))

;(define (make-account balance password)
;  (define (withdraw amount)
;    (if (>= balance amount)
;        (begin (set! balance (- balance amount))
;               balance)
;        (error "Insufficient funds")))
;  (define (deposit amount)
;    (set! balance (+ balance amount))
;    balance)
;  (define (dispatch p m)
;    (if (eq? p password)
;        (cond ((eq? m 'withdraw) withdraw)
;              ((eq? m 'deposit) deposit)
;              (else (error "Unknown request: MAKE-ACCOUNT"
;                           m)))
;        (error "Incorrect password")))
;  dispatch)

;(define (make-account balance password)
;  (define (call-the-cops)
;    (error "FBI open up"))
;  (define (withdraw amount)
;    (if (>= balance amount)
;        (begin (set! balance (- balance amount))
;               balance)
;        (error "Insufficient funds")))
;  (define (deposit amount)
;    (set! balance (+ balance amount))
;    balance)
;  (let ((fails 0))
;    (lambda (p m)
;      (if (eq? p password)
;          (begin (set! fails 0)
;                 (cond ((eq? m 'withdraw) withdraw)
;                       ((eq? m 'deposit) deposit)
;                       (else (error "Unknown request: MAKE-ACCOUNT"
;                                    m))))
;          (begin (set! fails (+ fails 1))
;                 (if (> fails 7)
;                     (call-the-cops)
;                     (error "Incorrect password")))))))

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1)))
          (else
           (iter (- trials-remaining 1)
                 trials-passed))))
  (iter trials 0))
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))
(define (integral-test P x1 x2 y1 y2)
  (lambda () (P (random-in-range x1 x2) (random-in-range y1 y2))))
(define (area x1 x2 y1 y2)
  (* (- x2 x1) (- y2 y1)))
(define (estimate-integral P x1 x2 y1 y2 trials)
  (* (monte-carlo trials (integral-test P x1 x2 y1 y2)) (area x1 x2 y1 y2)))
(define (square x) (* x x))
(define (unit-circle x y)
  (<= (+ (square x) (square y)) 1))
;(estimate-integral unit-circle -1.0 1.0 -1.0 1.0 100000)

;(define rand
;  (let ((x random-init))
;    (lambda (m)
;      (cond ((eq? m 'generate) (set! x (rand-update x)) x)
;            ((eq? m 'reset) (lambda (init) (set! x init)))
;            (else (error "Unknown request: RAND" m))))))

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        (error "Insufficient funds")))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (if (eq? p password)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error "Unknown request: MAKE-ACCOUNT"
                           m)))
        (error "Incorrect password")))
  dispatch)
(define (make-joint account old-password new-password)
  (define (dispatch p m)
    (if (eq? p new-password)
        (cond ((eq? m 'withdraw) (account old-password 'withdraw))
              ((eq? m 'deposit) (account old-password 'deposit))
              (else (error "Unknown request: MAKE-JOINT"
                           m)))
        (error "Incorrect password")))
  (account old-password 'withdraw)
  dispatch)

(define f
  (let ((a 1))
    (lambda (x) (set! a (* a x)) a)))