#lang sicp

(define (make-accumulator sum)
  (lambda (n)
    (set! sum (+ sum n))
    sum))

;(define A (make-accumulator 5))
;(A 10)
;(A 10)

(define (make-monitored f)
  (let ((calls 0))
    (lambda (m)
      (cond ((eq? m 'how-many-calls?) calls)
            ((eq? m 'reset-count) (set! calls 0))
            (else (set! calls (+ calls 1)) (f m))))))

;(define s (make-monitored sqrt))
;(s 100)
;(s 'how-many-calls?)

(define (make-account balance password)
  (define (call-the-cops)
    (error "FBI open up"))
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        (error "Insufficient funds")))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((fails 0))
    (lambda (p m)
      (if (eq? p password)
          (begin (set! fails 0)
                 (cond ((eq? m 'withdraw) withdraw)
                       ((eq? m 'deposit) deposit)
                       (else (error "Unknown request: MAKE-ACCOUNT"
                                    m))))
          (begin (set! fails (+ fails 1))
                 (if (> fails 7)
                     (call-the-cops)
                     (error "Incorrect password")))))))

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'withdraw) 40)
((acc 'some-other-password 'deposit) 50)