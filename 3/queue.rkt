#lang sicp

;(define (front-ptr queue) (car queue))
;(define (rear-ptr queue) (cdr queue))
;(define (set-front-ptr! queue item)
;  (set-car! queue item))
;(define (set-rear-ptr! queue item)
;  (set-cdr! queue item))
;(define (empty-queue? queue)
;  (null? (front-ptr queue)))
;(define (make-queue) (cons '() '()))
;(define (front-queue queue)
;  (if (empty-queue? queue)
;      (error "FRONT called with an empty queue" queue)
;      (car (front-ptr queue))))
;(define (insert-queue! queue item)
;  (let ((new-pair (cons item '())))
;    (cond ((empty-queue? queue)
;           (set-front-ptr! queue new-pair)
;           (set-rear-ptr! queue new-pair)
;           queue)
;          (else
;           (set-cdr! (rear-ptr queue) new-pair)
;           (set-rear-ptr! queue new-pair)
;           queue))))
;(define (delete-queue! queue)
;  (cond ((empty-queue? queue)
;         (error "DELETE! called with an empty queue" queue))
;        (else (set-front-ptr! queue (cdr (front-ptr queue)))
;              queue)))

; The car of the list is the front pointer of the queue, which is interpreted to be the whole list
; The cdr of the list is the rear pointer of the queue, which is interpreted to be the list containing the last pair
;(define (print-queue queue)
;  (front-ptr queue))

;(define (make-queue)
;  (let ((front-ptr '())
;        (rear-ptr '()))
;    (define (set-front-ptr! item)
;      (set! front-ptr item))
;    (define (set-rear-ptr! item)
;      (set! rear-ptr item))
;    (define (dispatch m)
;      (cond ((eq? m 'front-ptr) front-ptr)
;            ((eq? m 'rear-ptr) rear-ptr)
;            ((eq? m 'set-front-ptr!) set-front-ptr!)
;            ((eq? m 'set-rear-ptr!) set-rear-ptr!)
;            (else (error "Undefined operation: MAKE-QUEUE" m))))
;    dispatch))
;(define (empty-queue? queue)
;  (null? (queue 'front-ptr)))
;(define (front-queue queue)
;  (if (empty-queue? queue)
;      (error "FRONT called with an empty queue")
;      (car (queue 'front-ptr))))
;(define (insert-queue! queue item)
;  (let ((new-pair (cons item '())))
;    (cond ((empty-queue? queue)
;           ((queue 'set-front-ptr!) new-pair)
;           ((queue 'set-rear-ptr!) new-pair)
;           queue)
;          (else
;           (set-cdr! (queue 'rear-ptr) new-pair)
;           ((queue 'set-rear-ptr!) new-pair)
;           queue))))
;(define (delete-queue! queue)
;  (cond ((empty-queue? queue)
;         (error "DELETE! called with an empty queue" queue))
;        (else ((queue 'set-front-ptr!) (cdr (queue 'front-ptr)))
;              queue)))
;(define (print-queue queue)
;  (queue 'front-ptr))

;(define q1 (make-queue))
;(print-queue (insert-queue! q1 'a))
;(print-queue (insert-queue! q1 'b))
;(print-queue (delete-queue! q1))
;(print-queue (delete-queue! q1))

(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))
(define (one-item-deque? deque)
  (eq? (front-ptr deque) (rear-ptr deque)))
(define (two-item-deque? deque)
  (eq? (next (front-ptr deque)) (rear-ptr deque)))
(define (make-node item prev next) (list item prev next))
(define (item node) (car node))
(define (prev node) (cadr node))
(define (next node) (caddr node))
(define (set-item! node item) (set-car! node item))
(define (set-prev! node prev) (set-car! (cdr node) prev))
(define (set-next! node next) (set-car! (cddr node) next))
(define (empty-deque? deque)
  (null? (front-ptr deque)))
(define (make-deque) (cons '() '()))
(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (item (front-ptr deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (item (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (let ((new-node (make-node item '() (front-ptr deque))))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-node)
           (set-rear-ptr! deque new-node)
           deque)
          (else
           (set-prev! (front-ptr deque) new-node)
           (set-front-ptr! deque new-node)
           deque))))
(define (rear-insert-deque! deque item)
  (let ((new-node (make-node item (rear-ptr deque) '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-node)
           (set-rear-ptr! deque new-node)
           deque)
          (else
           (set-next! (rear-ptr deque) new-node)
           (set-rear-ptr! deque new-node)
           deque))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "FRONT-DELETE! called with an empty deque" deque))
        (else (if (one-item-deque? deque)
                  (set-rear-ptr! deque '())
                  (set-prev! (next (front-ptr deque)) '()))
              (set-front-ptr! deque (next (front-ptr deque)))
              deque)))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "REAR-DELETE! called with an empty deque" deque))
        (else (if (one-item-deque? deque)
                  (set-front-ptr! deque '())
                  (set-next! (prev (rear-ptr deque)) '()))
              (set-rear-ptr! deque (prev (rear-ptr deque)))
              deque)))
(define (print-deque deque)
  (define (print node)
    (if (null? node)
      '()
      (cons (item node) (print (next node)))))
  (print (front-ptr deque)))

(define d1 (make-deque))
(print-deque (front-insert-deque! d1 'a))
(print-deque (rear-insert-deque! d1 'b))
(print-deque (front-delete-deque! d1))
(print-deque (rear-insert-deque! d1 'c))
(print-deque (front-delete-deque! d1))
(print-deque (rear-delete-deque! d1))